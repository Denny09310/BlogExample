@page "/"

@inject IApiClient Api
@inject NotificationService Notifications
@inject DialogService Dialog
@inject NavigationManager Navigation

<PageTitle>Blog App | Home</PageTitle>

<RadzenText TextStyle="TextStyle.H4" Text="Posts" />

<RadzenFormField class="mb-4 w-full">
    <Start>
        <RadzenIcon Icon="search" />
    </Start>
    <ChildContent>
        <RadzenTextBox @bind-Value="@searchTerm" @bind-Value:after="RefreshDataAsync" />
    </ChildContent>
    <End>
        @if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            <RadzenButton Icon="close" Size="ButtonSize.Small" Variant="Variant.Text" Click="ClearSearchAsync" />
        }
    </End>
</RadzenFormField>

@if (posts is not null)
{
    @if (posts.Count == 0)
    {
        <p>No posts found</p>
    }
    else
    {
        <div class="space-y-4">
            @foreach (var post in posts)
            {
                <RadzenCard class="cursor-pointer space-y-4" @onclick="@(() => Navigation.NavigateTo($"posts/{post.Id}"))">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenGravatar Email="@post.User.Email" />
                        <RadzenText Text="@post.User.Email" />
                    </RadzenStack>
                    <RadzenText TextStyle="TextStyle.H5">@Highlight(post.Title)</RadzenText>
                    <RadzenText class="line-clamp-4">@Highlight(post.Content)</RadzenText>
                </RadzenCard>
            }
        </div>
    }
}

@code
{
    private List<Post>? posts;
    private string? searchTerm;

    protected override async Task OnInitializedAsync()
    {
        Dialog.ShowLoading();
        await RefreshDataAsync();
    }

    private async Task RefreshDataAsync()
    {
        try
        {
            var filter = !string.IsNullOrWhiteSpace(searchTerm)
                ? $"Title.Contains(\"{searchTerm}\") or Content.Contains(\"{searchTerm}\")"
                : null;

            using var response = await Api.GetPosts(limit: 100, offset: 0, filter);

            if (!response.IsSuccessful)
            {
                Notifications.Notify(NotificationSeverity.Error, "Failed to load posts");
                return;
            }

            posts = Mapper.Instance.Map(response.Content.Posts);
        }
        finally
        {
            Dialog.Close();
        }
    }

    private async Task ClearSearchAsync()
    {
        searchTerm = null;
        await RefreshDataAsync();
    }

    private MarkupString Highlight(string text)
    {
        var plainText = Markdown.ToPlainText(text);

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return new MarkupString(plainText);
        }

        var highlighted = plainText.Replace(searchTerm, $"<mark>{searchTerm}</mark>", StringComparison.OrdinalIgnoreCase);
        return new MarkupString(highlighted);
    }
}