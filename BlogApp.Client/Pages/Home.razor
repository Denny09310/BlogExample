@page "/"
@inject IApiClient Api

<PageTitle>Blog App | Home</PageTitle>

<div class="p-4">
    <h1 class="mb-4">Posts</h1>

    <InputSearch @bind-Search="Search" @bind-Search:after="RefreshAsync" />
    <OrderSelector @bind-Order="Order" @bind-Order:after="RefreshAsync" />
    <Pagination @bind-Page="Page" @bind-Page:after="RefreshAsync" Items="Posts" PageSize="@PAGE_SIZE" />

    <LoadingView @ref="_loading" ProvideData="ProvideDataAsync">
        <LoadingContent>
            <div class="loading-spinner"></div>
        </LoadingContent>
        <ErrorContent>
            <div class="alert alert-danger" role="alert">
                <h4 class="alert-heading">Error!</h4>
                <p>@context.Message</p>
            </div>
        </ErrorContent>
        <ChildContent Context="posts">
            @foreach (var post in posts)
            {
                <PostCard @key="post.Id"  Post="@post" />
            }
        </ChildContent>
    </LoadingView>
</div>

@code 
{
    private const int PAGE_SIZE = 25;
    private const string BASE_FILTER = "Title.ToLower().Contains(\"{0}\".ToLower()) || Content.ToLower().Contains(\"{0}\".ToLower())";

    private LoadingView<List<Post>>? _loading;

    private int Page { get; set; }
    private string? Search { get; set; }
    private string Order { get; set; } = nameof(Post.CreatedAt);

    private List<Post> Posts => _loading?.Data ?? new List<Post>();

    private async Task<List<Post>> ProvideDataAsync()
    {
        var filter = !string.IsNullOrWhiteSpace(Search)
            ? string.Format(BASE_FILTER, Search)
            : null;

        var response = await Api.GetPosts(PAGE_SIZE, Page * PAGE_SIZE, filter, Order);
        if (!response.IsSuccessful)
        {
            throw new Exception("Unable to load posts", response.Error);
        }
        return Mapper.Map(response.Content.Posts);
    }

    private async Task RefreshAsync()
    {
        if (_loading != null)
        {
            await _loading.RefreshAsync();
        }
    }
}