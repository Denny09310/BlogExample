@typeparam T

@if (IsLoading)
{
    @if (LoadingContent != null)
    {
        @LoadingContent
    }
    else
    {
        <p>Loading...</p>
    }
}
else if (Error != null)
{
    @if (ErrorContent != null)
    {
        @ErrorContent(Error)
    }
    else
    {
        <p>@Error</p>
    }
}
else if (ChildContent != null)
{
    if (Data != null)
    {
        @ChildContent(Data)
    }
    else
    {
        <p>No data available.</p>
    }
}

@code 
{
    [Parameter] public RenderFragment? LoadingContent { get; set; }
    [Parameter] public RenderFragment<Exception>? ErrorContent { get; set; }
    [Parameter] public RenderFragment<T>? ChildContent { get; set; }
    [Parameter] public Func<Task<T>> ProvideData { get; set; } = default!;

    private bool IsLoading { get; set; } = true;
    private T? Data { get; set; }
    private Exception? Error { get; set; }

    public Task RefreshAsync() => ProvideDataAsync();

    protected override Task OnInitializedAsync() => ProvideDataAsync();

    private async Task ProvideDataAsync()
    {
        try
        {
            IsLoading = true;
            Data = await ProvideData();
        }
        catch (Exception ex)
        {
            Error = ex;
        }
        finally
        {
            IsLoading = false;
        }
    }
}
